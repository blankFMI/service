plugins {
	id 'org.springframework.boot' version '3.4.0'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.asciidoctor.jvm.convert' version '2.4.0'
	id 'io.freefair.lombok' version '8.12.2.1'
	id 'java'
	id 'jacoco'
}

group = 'ro.unibuc'
version = '0.0.1-SNAPSHOT'
java {
	sourceCompatibility = JavaVersion.VERSION_21
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
	set('testcontainersVersion', "1.20.4")
}

dependencies {
	def cucumberVersion = "7.20.1"
	def junitVersion = "5.11.4"
	def testcontainersVersion = "1.20.4"
	def jwtVersion = "0.12.6"
	def lombokVersion = "1.18.36"
	def aspectjVersion = "1.9.22.1"

	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.session:spring-session-core'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.data:spring-data-mongodb'
	implementation 'commons-io:commons-io:2.18.0'
	implementation 'jakarta.annotation:jakarta.annotation-api:3.0.0'

	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.11.4'

	// AOP
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation "org.aspectj:aspectjrt:$aspectjVersion"
	implementation "org.aspectj:aspectjweaver:$aspectjVersion"

	// JWT
	implementation "io.jsonwebtoken:jjwt-api:$jwtVersion"
	implementation "io.jsonwebtoken:jjwt-impl:$jwtVersion"
	implementation "io.jsonwebtoken:jjwt-jackson:$jwtVersion"

	/* ---------- NEW: reactive stack ---------- */
    implementation 'org.springframework.boot:spring-boot-starter-webflux'  // brings in WebClient + Reactor

    /* ---------- NEW: Resilience4j ---------- */
    implementation 'io.github.resilience4j:resilience4j-spring-boot3:2.2.0'
    implementation 'io.github.resilience4j:resilience4j-reactor:2.2.0'     // Reactor operators

	// Lombok dependency
	compileOnly "org.projectlombok:lombok:$lombokVersion"
	annotationProcessor "org.projectlombok:lombok:$lombokVersion"

	// Integration tests - test containers dependencies
    testImplementation "org.testcontainers:testcontainers:$testcontainersVersion"
    testImplementation "org.testcontainers:mongodb:$testcontainersVersion"

	//	E2E tests
	runtimeOnly "org.junit.vintage:junit-vintage-engine:$junitVersion"
	testImplementation "io.cucumber:cucumber-core:$cucumberVersion"
	testImplementation "io.cucumber:cucumber-java:$cucumberVersion"
	testImplementation "io.cucumber:cucumber-junit:$cucumberVersion"
	testImplementation "io.cucumber:cucumber-spring:$cucumberVersion"
}

dependencyManagement {
	imports {
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
	}
}

test {
	outputs.dir snippetsDir
	useJUnitPlatform {
		excludeTags ("IntegrationTest", "E2E")
	}
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
}

task testIT(type: Test) {
	outputs.dir snippetsDir
	outputs.upToDateWhen { false }

	useJUnitPlatform {
		includeTags "IntegrationTest"
	}
}

configurations {
	cucumberRuntime {
		extendsFrom testImplementation
	}
}

task testE2E() {
	dependsOn assemble, testClasses
	doLast {
		providers.javaexec {
			mainClass.set("io.cucumber.core.cli.Main")
			classpath(configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output)
			args([
					'--plugin', 'pretty',
					'--plugin', 'html:target/cucumber-report.html',
					'--glue', 'ro.unibuc.hello.e2e.steps',
					'src/test/resources'])
		}
	}
}

asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
}
